// Prisma schema for LMS platform (based on product_backlog.typ UC-01 and UC-08)
// Key workflow: 
// 1. Anyone can register (UC-01) - default role is typically LEARNER
// 2. Users who want to create a course submit a "Request to Create Course" (UC-08: InstructorApplication)
// 3. Admin reviews and approves/rejects the request
// 4. On approval: Admin creates the course AND assigns the requester as instructor for that course
// 5. Approval as instructor is tied to course creation intent (not a general automatic upgrade)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum EnrollmentStatus {
  PENDING
  ENROLLED
  COMPLETED
  CANCELLED
}

enum SubmissionStatus {
  SUBMITTED
  LATE
  NEEDS_RESUBMIT
  GRADED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum NotificationChannel {
  IN_APP
  EMAIL
}

// Status for course creation request: users explicitly request to create a course (which grants instructor privileges upon approval)
// Per UC-08: "Request to Create Course & Instructor Approval" - approval is tied to the course creation intent
enum InstructorApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

// Core models
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String?  @unique
  name      String?
  password  String? // nullable for OAuth-only accounts
  bio       String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  roles         UserRole[]
  courses       Course[]       @relation("InstructorCourses")
  enrollments   Enrollment[]
  submissions   Submission[]   @relation("studentSubmissions")
  gradedSubmits Submission[]   @relation("graderSubmissions")
  notifications Notification[]
  tokens        Token[]
  messages      Message[]
  reviews       Review[]
  payments      Payment[]
  certificates  Certificate[]

  // Instructor application relations (split into submitted / reviewed)
  applicationsSubmitted InstructorApplication[] @relation("ApplicantApplications")
  applicationsReviewed  InstructorApplication[] @relation("ReviewerApplications")

  auditLogs AuditLog[] @relation("actorLogs")
}

model Token {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  user      User      @relation(fields: [userId], references: [id])
  userId    String  
}

model Role {
  id   Int     @id @default(autoincrement())
  name String  @unique
  desc String?

  users UserRole[]
}

model UserRole {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int

  @@unique([userId, roleId])
}

// Courses are created by Admins only (per UC-11). 
// instructorId is assigned when Admin approves a course creation request and assigns the requester as instructor.
model Course {
  id          String    @id @default(uuid())
  title       String
  slug        String    @unique
  shortDesc   String?
  description String?
  language    String?   @default("en")
  level       String? // e.g., Beginner / Intermediate / Advanced
  price       Float?    @default(0)
  published   Boolean   @default(false)
  publishDate DateTime?
  coverImage  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // relations
  instructor   User?         @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: SetNull)
  instructorId String?
  modules      Module[]
  enrollments  Enrollment[]
  assignments  Assignment[]
  reviews      Review[]
  payments     Payment[]
  certificates Certificate[]
  threads      Thread[] // <-- opposite side for Thread.course relation

  @@index([title])
}

model Module {
  id        String   @id @default(uuid())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  title     String
  position  Int      @default(0)
  createdAt DateTime @default(now())
  lessons   Lesson[]

  @@index([courseId, position])
}

model Lesson {
  id          String   @id @default(uuid())
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId    String
  title       String
  content     String? // markdown or rich text
  mediaUrl    String? // optional video/file url
  contentType String? // "video" | "article" | "file"
  durationSec Int? // for video lessons
  position    Int      @default(0)
  createdAt   DateTime @default(now())

  @@index([moduleId, position])
}

model Enrollment {
  id          String           @id @default(uuid())
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  course      Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  status      EnrollmentStatus @default(ENROLLED)
  isPaid      Boolean          @default(false)
  enrolledAt  DateTime         @default(now())
  completedAt DateTime?

  @@unique([userId, courseId])
  @@index([courseId])
}

model Assignment {
  id          String       @id @default(uuid())
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  title       String
  description String?
  dueDate     DateTime?
  maxPoints   Int?         @default(100)
  createdAt   DateTime     @default(now())
  submissions Submission[]
}

model Submission {
  id           String           @id @default(uuid())
  assignment   Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String
  student      User             @relation("studentSubmissions", fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String
  content      String? // comments or text
  fileUrl      String?
  status       SubmissionStatus @default(SUBMITTED)
  grade        Float?
  feedback     String?
  submittedAt  DateTime         @default(now())
  gradedAt     DateTime?
  grader       User?            @relation("graderSubmissions", fields: [graderId], references: [id], onDelete: SetNull)
  graderId     String?

  @@index([assignmentId, studentId])
}

model Notification {
  id        String              @id @default(uuid())
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  channel   NotificationChannel @default(IN_APP)
  title     String
  body      String
  data      Json?
  read      Boolean             @default(false)
  createdAt DateTime            @default(now())

  @@index([userId, read])
}

model Thread {
  id        String    @id @default(uuid())
  course    Course?   @relation(fields: [courseId], references: [id], onDelete: SetNull)
  courseId  String?
  subject   String?
  messages  Message[]
  createdAt DateTime  @default(now())
}

model Message {
  id        String   @id @default(uuid())
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId  String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String
  content   String
  fileUrl   String?
  createdAt DateTime @default(now())

  @@index([threadId, createdAt])
}

model Review {
  id        String   @id @default(uuid())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  rating    Int      @default(5)
  comment   String?
  createdAt DateTime @default(now())

  @@unique([courseId, userId])
}

model Payment {
  id            String        @id @default(uuid())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  course        Course?       @relation(fields: [courseId], references: [id], onDelete: SetNull)
  courseId      String?
  amount        Float
  currency      String        @default("USD")
  provider      String?
  providerTxnId String?       @unique
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Certificate {
  id               String   @id @default(uuid())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  course           Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId         String
  issuedAt         DateTime @default(now())
  certificateUrl   String
  verificationCode String   @unique
}

// Per UC-08: "Request to Create Course & Instructor Approval"
// Users create an InstructorApplication when they want to create a course (not a general instructor upgrade).
// Workflow:
// 1. User submits request with proposed course details
// 2. Admin reviews and approves/rejects
// 3. On approval:
//    - Admin creates the Course record
//    - Admin assigns applicant as instructor for that course (sets course.instructorId = applicantId)
//    - Admin optionally grants course-level or global instructor role (creates UserRole entry)
// 4. On rejection: applicant notified with reason
model InstructorApplication {
  id          String @id @default(uuid())
  applicant   User   @relation("ApplicantApplications", fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId String

  // Course proposal details (per UC-08: user proposes course metadata)
  requestedCourseTitle   String? // Proposed course title
  requestedCourseSummary String? // Short outline/description of proposed course
  portfolioUrl           String? // Optional: link to portfolio or sample content

  status     InstructorApplicationStatus @default(PENDING)
  note       String?
  appliedAt  DateTime                    @default(now())
  reviewedAt DateTime?
  reviewer   User?                       @relation("ReviewerApplications", fields: [reviewerId], references: [id], onDelete: SetNull)
  reviewerId String?

  @@index([applicantId, status])
}

model AuditLog {
  id         String   @id @default(uuid())
  actor      User?    @relation("actorLogs", fields: [actorId], references: [id], onDelete: SetNull)
  actorId    String?
  action     String
  resource   String?
  resourceId String?
  data       Json?
  createdAt  DateTime @default(now())

  @@index([actorId, createdAt])
}

// Utility
model FileMeta {
  id        String   @id @default(uuid())
  url       String
  filename  String?
  size      Int?
  mimeType  String?
  createdAt DateTime @default(now())
}

// Implementation Notes (per UC-01, UC-08, UC-11, UC-17):
// - Anyone can register (UC-01): POST /auth/register creates User with default LEARNER role (or no role initially)
// - "Only admin creates courses" (UC-11): Course records can only be created via Admin actions
// - Course creation request workflow (UC-08):
//   1. User wants to create a course -> POST /instructor-applications with requestedCourseTitle, requestedCourseSummary, portfolioUrl
//   2. Admin reviews -> GET /admin/instructor-applications?status=PENDING
//   3. Admin approves -> PUT /admin/instructor-applications/:id/approve
//      - Backend creates Course record with course.instructorId = applicantId
//      - Backend creates/updates UserRole to grant Instructor privileges (course-level or global per policy)
//      - Backend sets application.status = APPROVED, application.reviewerId = adminId, application.reviewedAt = now()
//   4. Admin rejects -> PUT /admin/instructor-applications/:id/reject (sets status = REJECTED, notify applicant)
// - User & Course assignment (UC-17): Admin can also manually assign instructor roles and course-level permissions via /admin/users endpoints
