generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid())
  username              String?                 @unique
  createdAt             DateTime                @default(now())
  email                 String                  @unique
  updatedAt             DateTime                @updatedAt
  avatarUrl             String?
  bio                   String?
  name                  String?
  password              String?
  auditLogs             AuditLog[]              @relation("actorLogs")
  certificates          Certificate[]
  courses               Course[]                @relation("InstructorCourses")
  enrollments           Enrollment[]
  applicationsSubmitted InstructorApplication[] @relation("ApplicantApplications")
  applicationsReviewed  InstructorApplication[] @relation("ReviewerApplications")
  messages              Message[]
  notifications         Notification[]
  payments              Payment[]
  reviews               Review[]
  gradedSubmits         Submission[]            @relation("graderSubmissions")
  submissions           Submission[]            @relation("studentSubmissions")
  tokens                Token[]
  roles                 UserRole[]
}

model Token {
  id     Int    @id @default(autoincrement())
  token  String @unique
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Role {
  id    Int        @id @default(autoincrement())
  name  String     @unique
  desc  String?
  users UserRole[]
}

model UserRole {
  id     Int    @id @default(autoincrement())
  userId String
  roleId Int
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model Course {
  id           String        @id @default(uuid())
  title        String
  slug         String        @unique
  shortDesc    String?
  description  String?
  language     String?       @default("en")
  level        String?
  price        Float?        @default(0)
  published    Boolean       @default(false)
  publishDate  DateTime?
  coverImage   String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  instructorId String?
  category     String?
  assignments  Assignment[]
  certificates Certificate[]
  instructor   User?         @relation("InstructorCourses", fields: [instructorId], references: [id])
  enrollments  Enrollment[]
  modules      Module[]
  payments     Payment[]
  reviews      Review[]
  threads      Thread[]

  @@index([title])
}

model Module {
  id        String   @id @default(uuid())
  courseId  String
  title     String
  position  Int      @default(0)
  createdAt DateTime @default(now())
  lessons   Lesson[]
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId, position])
}

model Lesson {
  id          String   @id @default(uuid())
  moduleId    String
  title       String
  content     String?
  mediaUrl    String?
  contentType String?
  durationSec Int?
  position    Int      @default(0)
  createdAt   DateTime @default(now())
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId, position])
}

model Enrollment {
  id          String           @id @default(uuid())
  userId      String
  courseId    String
  status      EnrollmentStatus @default(ENROLLED)
  isPaid      Boolean          @default(false)
  enrolledAt  DateTime         @default(now())
  completedAt DateTime?
  course      Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}

model Assignment {
  id          String       @id @default(uuid())
  courseId    String
  title       String
  description String?
  dueDate     DateTime?
  maxPoints   Int?         @default(100)
  createdAt   DateTime     @default(now())
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions Submission[]
}

model Submission {
  id           String           @id @default(uuid())
  assignmentId String
  studentId    String
  content      String?
  fileUrl      String?
  status       SubmissionStatus @default(SUBMITTED)
  grade        Float?
  feedback     String?
  submittedAt  DateTime         @default(now())
  gradedAt     DateTime?
  graderId     String?
  assignment   Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  grader       User?            @relation("graderSubmissions", fields: [graderId], references: [id])
  student      User             @relation("studentSubmissions", fields: [studentId], references: [id], onDelete: Cascade)

  @@index([assignmentId, studentId])
}

model Notification {
  id        String              @id @default(uuid())
  userId    String
  channel   NotificationChannel @default(IN_APP)
  title     String
  body      String
  data      Json?
  read      Boolean             @default(false)
  createdAt DateTime            @default(now())
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
}

model Thread {
  id        String    @id @default(uuid())
  courseId  String?
  subject   String?
  createdAt DateTime  @default(now())
  messages  Message[]
  course    Course?   @relation(fields: [courseId], references: [id])
}

model Message {
  id        String   @id @default(uuid())
  threadId  String
  senderId  String
  content   String
  fileUrl   String?
  createdAt DateTime @default(now())
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId, createdAt])
}

model Review {
  id        String   @id @default(uuid())
  courseId  String
  userId    String
  rating    Int      @default(5)
  comment   String?
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
}

model Payment {
  id            String        @id @default(uuid())
  userId        String
  courseId      String?
  amount        Float
  currency      String        @default("USD")
  provider      String?
  providerTxnId String?       @unique
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  course        Course?       @relation(fields: [courseId], references: [id])
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Certificate {
  id               String   @id @default(uuid())
  userId           String
  courseId         String
  issuedAt         DateTime @default(now())
  certificateUrl   String
  verificationCode String   @unique
  course           Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InstructorApplication {
  id                     String                      @id @default(uuid())
  applicantId            String
  requestedCourseTitle   String?
  requestedCourseSummary String?
  portfolioUrl           String?
  status                 InstructorApplicationStatus @default(PENDING)
  note                   String?
  appliedAt              DateTime                    @default(now())
  reviewedAt             DateTime?
  reviewerId             String?
  applicant              User                        @relation("ApplicantApplications", fields: [applicantId], references: [id], onDelete: Cascade)
  reviewer               User?                       @relation("ReviewerApplications", fields: [reviewerId], references: [id])

  @@index([applicantId, status])
}

model AuditLog {
  id         String   @id @default(uuid())
  actorId    String?
  action     String
  resource   String?
  resourceId String?
  data       Json?
  createdAt  DateTime @default(now())
  actor      User?    @relation("actorLogs", fields: [actorId], references: [id])

  @@index([actorId, createdAt])
}

model FileMeta {
  id        String   @id @default(uuid())
  url       String
  filename  String?
  size      Int?
  mimeType  String?
  createdAt DateTime @default(now())
}

enum EnrollmentStatus {
  PENDING
  ENROLLED
  COMPLETED
  CANCELLED
}

enum SubmissionStatus {
  SUBMITTED
  LATE
  NEEDS_RESUBMIT
  GRADED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum NotificationChannel {
  IN_APP
  EMAIL
}

enum InstructorApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}
