@startuml
' ==========================================================
' DOMAIN DIAGRAM FOR LMS (Fixed Version)
' ==========================================================

allowmixing

skinparam packageStyle rect
skinparam shadowing false
skinparam classAttributeIconSize 0
skinparam defaultTextAlignment left

' ================= Legend =================
note as Legend
  <<Aggregate>> = Aggregate root / primary entity
  Arrow "uses" means one context depends on or references another context's aggregate
end note

' ==========================================================
' Identity & Access Context
' ==========================================================
package "Identity & Access" as Identity {
  class User <<Aggregate>> {
    +id: String
    +email: String
    +username: String
    +password: String
    +name: String
  }

  class Role {
    +id: Int
    +name: String
    +desc: String
  }

  class UserRole {
    +id: Int
    +userId: String
    +roleId: Int
  }

  class Token {
    +id: Int
    +token: String
  }

  ' Internal relationships
  User "1" *-- "0..*" UserRole
  Role "1" *-- "0..*" UserRole
  User "1" *-- "0..*" Token
}

' ==========================================================
' Course Catalog Context
' ==========================================================
package "Course Catalog" as Catalog {
  class Course <<Aggregate>> {
    +id: String
    +title: String
    +slug: String
    +published: Boolean
  }

  class Module {
    +id: String
    +courseId: String
    +title: String
  }

  class Lesson {
    +id: String
    +moduleId: String
    +title: String
  }

  class Assignment {
    +id: String
    +courseId: String
    +title: String
  }

  class Review {
    +id: String
    +courseId: String
    +userId: String
  }

  class Certificate {
    +id: String
    +userId: String
    +courseId: String
  }

  ' Internal relationships
  Course "1" *-- "0..*" Module
  Module "1" *-- "0..*" Lesson
  Course "1" *-- "0..*" Assignment
  Course "1" *-- "0..*" Review
  Course "1" *-- "0..*" Certificate
}

' ==========================================================
' Learning & Enrollment Context
' ==========================================================
package "Learning & Enrollment" as Learning {
  class Enrollment <<Aggregate>> {
    +id: String
    +userId: String
    +courseId: String
    +status: EnrollmentStatus
  }

  class Submission <<Aggregate>> {
    +id: String
    +assignmentId: String
    +studentId: String
    +status: SubmissionStatus
  }
}

' ==========================================================
' Payment & Billing Context
' ==========================================================
package "Payment & Billing" as Billing {
  class Payment <<Aggregate>> {
    +id: String
    +userId: String
    +courseId: String
    +amount: Float
    +currency: String
    +status: PaymentStatus
  }

  rectangle "Payment Gateway (external)" as PG #DDDDDD
}

' ==========================================================
' Communication Context
' ==========================================================
package "Communication" as Comm {
  class Thread <<Aggregate>> {
    +id: String
    +courseId: String
    +subject: String
  }

  class Message {
    +id: String
    +threadId: String
    +senderId: String
  }

  class Notification <<Aggregate>> {
    +id: String
    +userId: String
    +title: String
    +body: String
  }

  ' Internal relationships
  Thread "1" *-- "0..*" Message
}

' ==========================================================
' Admin & Audit Context
' ==========================================================
package "Admin & Audit" as Admin {
  class InstructorApplication <<Aggregate>> {
    +id: String
    +applicantId: String
    +status: InstructorApplicationStatus
  }

  class AuditLog <<Aggregate>> {
    +id: String
    +actorId: String
    +action: String
  }

  class FileMeta {
    +id: String
    +url: String
  }
}

' ==========================================================
' ENUMS
' ==========================================================
enum EnrollmentStatus {
  PENDING
  ENROLLED
  COMPLETED
  CANCELLED
}

enum SubmissionStatus {
  SUBMITTED
  GRADED
  RESUBMIT
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum InstructorApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

' ==========================================================
' RELATIONSHIPS / CONTEXT DEPENDENCIES
' ==========================================================
Learning ..> Identity : references User
Catalog ..> Identity : references Instructor
Billing ..> Identity : references Payer
Comm ..> Identity : references Sender/Receiver
Admin ..> Identity : references Applicant/Reviewer

Learning ..> Catalog : enrolls in Course
Billing ..> Catalog : charges Course
Comm ..> Catalog : thread belongs to Course
Admin ..> Catalog : approves Course

Billing --> PG : "processes payment"

' ==========================================================
' DOMAIN EVENTS
' ==========================================================
package "Domain Events" as Events <<Cloud>> {
  class EnrollmentCreated <<Event>>
  class PaymentCompleted <<Event>>
  class SubmissionGraded <<Event>>
  class CertificateIssued <<Event>>
}

Learning ..> Events : publishes
Billing ..> Events : publishes
Catalog ..> Events : publishes

@enduml
